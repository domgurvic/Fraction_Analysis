#!/usr/bin/env python
# coding: utf-8

import pandas as pd
import numpy as np
from rdkit import Chem
from tqdm import trange, tqdm

def calculate_fg_single(df):

    mol_substructures, name_substructure = generate_mols_for_substructures()

    name_substructure = name_substructure + ['SMILES']

    frame_left=[]
    frame_right=[]

    print('Calcualting matches')

    #for index in enumerate(df.LHS.values)):

    for index in tqdm(range(len(df))):  
        
        #grab structure
        frame_temp=pd.DataFrame(0, index=range(1), columns=name_substructure)

        #turn it into mol 
        try:
            mol_target_left=Chem.MolFromSmarts(df.SMILES.values[index])
            mol_target_left.UpdatePropertyCache()
            mol_target_left = Chem.AddHs(mol_target_left)
        except TypeError:
            print('Error: ', index, target)  

        if type(mol_target_left) != Chem.rdchem.Mol:

            print('failed to MolObject: ', index)

        frame_temp['SMILES'] = df.SMILES.values[index]

        for sub_nr, sub in enumerate(mol_substructures):
            if mol_target_left.HasSubstructMatch(sub):
                frame_temp[name_substructure[sub_nr]] = [1]

        frame_left.append(frame_temp.values)

    frame_df = pd.DataFrame(np.concatenate(frame_left), columns = name_substructure)

    return frame_df.reset_index(drop=True)



# An algorithm to identify functional groups in organic molecules ref [7] : Salmina ES, Haider N, Tetko IV (2016) Extended functional groups (EFG):
# an efcient set for chemical characterization and structure-activity relationship studies of chemical compounds. Molecules 21:1â€“8

# does not contain 500 SMART descriptors!

# Using my own descriptors:

def generate_mols_for_substructures():

    smarts_substructures = ['[c][NX3;!$(NC=,#[!#1!#6])]',
     '[a]',
     '[#7;a]',
     '[$(n=[OX1]),$([n+][OX1-])]',
     'c1ccccc1',
     '[!#1!#6;a]',
     '[H]Oc1ccccc1',
     'C=C',
     'C#C',
     'C#[C-]',
     'C=C=C',
     '[#6-]',
     '[$([C;!$(C=[OX1])][NX2-]-[NX2+]#[NX1]),$([C;!$(C=[OX1])][NX2]=[NX2+]=[NX1-]),$([C;!$(C=[OX1])][NX2]=N#[NX1])]',
     '[#1,#6]C(=[NX2])[#7]',
     '[#7][C;!$(C=[!#6])][#7]',
     '[#7X3;!$([#7]C=,#[!#6]);!$([#7]=,#*);!$([#7]S)]',
     '[#6][#7X3H2;!$([#7]C=,#[!#6])]',
     '[#6][#7X3H;!$([#7]C=,#[!#6])][#6]',
     '[#6][#7X3;!$([#7]C=,#[!#6])]([#6])[#6]',
     '[#6][NX4+]',
     '[$([#6][NX2-]-[NX2+]#[NX1]),$([#6][NX2]=[NX2+]=[NX1-]),$([#6][NX2]=N#[NX1])]',
     '[#6;!$([#6]=,#[!#6])]1[#6;!$([#6]=,#[!#6])]N1',
     '[#6][NX2][NX2][#6]',
     '[#6][NX2]=C=[NX2]',
     '[#7]C#[NX1]',
     '[#6]=[NX2]#[NX1]',
     'C=C[#7;!$([#7]C=,#[!#6])]',
     '[#7]C(=N)[#7]',
     '[NX3;$(N([#1,#6;!$([#6]=,#[!#6])])[#1,#6;!$([#6]=,#[!#6])])][NX3;$(N([#1,#6;!$([#6]=,#[!#6])])[#1,#6;!$([#6]=,#[!#6])])]',
     '[#1,#6]C([#1,#6])=[NX2][NX3]',
     '[#1,#6]C([#1,#6])=[NX2;$(N[#1,#6])]',
     'C=[NX2]',
     '[#6][N+]#[C-]',
     'C=C=[NX2]',
     '[#6]C#[NX1]',
     '[$([OX1]=C([#1,#6])[NX2-]-[NX2+]#[NX1]),$([OX1]=C([#1,#6])[NX2]=[NX2+]=[NX1-]),$([OX1]=C([#1,#6])[NX2]=N#[NX1])]',
     '[OX1]=C([#1,#6])C#[NX1]',
     '[OX1]=C([#1,#6])[NX3]C(=[OX1])[#7,#8]',
     '[NX3;!$(NS)]O[#6;!$(C=,#[!#6])]',
     '[$([#6][NX4]([#6])([#6])=[OX1]),$([#6][NX4+]([#6])([#6])[O-])]',
     '[$([#6][NX2]=[NX3+]([O-])[#6]),$([#6][NX2]=[NX3](=[OX1])[#6])]',
     '[NX3;$(N([#1,#6;!$([#6]=,#[!#6])])[#1,#6;!$([#6]=,#[!#6])])]C(=[OX1])O[#6;!$([#6]=,#[!#6])]',
     '[OX1]=[C;$(C[#7]);!$(C[#7]C=[OX1])][#1,#6]',
     '[OX1]=C([#7X3H2])[#1,#6]',
     '[OX1]=[C;$(C[#7X3H][#6,#7,#8]);!$(C[#7]C=[OX1])][#1,#6]',
     '[OX1]=[C;$(C[#7X3]([#6,#7,#8])[#6,#7,#8]);!$(C[#7]C=[OX1])][#1,#6]',
     '[#6]OC#[NX1]',
     'C=C[NX3]C=[OX1]',
     '[#7][C;!$(C=[!#6])][OX2H]',
     '[#7][C;!$(C=[!#6])][OX2][!H]',
     '[OX1]=C([#1,#6])[NX3][OX2H]',
     '[#7X3;!$([#7]C=,#[!#6]);!$([#7]S)][OX2H]',
     '[#1,#6]C(=[NX2])O[#6]',
     '[C;$(C[#1,#6])](=[OX1])[NX3][C;$(C[#1,#6])]=[OX1]',
     '[#6][NX2]=C=[OX1]',
     'O=[#6]-1-[#6]~*~[#6;!$([#6]=,#[!#6])]-[#7]-1',
     '[$([#6]O[NX3](=[OX1])=[OX1]),$([#6]O[NX3+](=[OX1])[O-])]',
     '[#6]O[NX2]=[OX1]',
     '[$([#6][NX3](=[OX1])=[OX1]),$([#6][NX3+](=[OX1])[O-])]',
     '[$([#1,#6]C([#1,#6])=[NX3+]([O-])[#8][#1,#6]),$([#1,#6]C([#1,#6])=[NX3+0](=[OX1])[#8][#1,#6])]',
     '[#1,#6][$(C([#1,#6])=[NX3+]([O-])[#6]),$(C([#1,#6])=[NX3+0](=[OX1])[#6])][#1,#6]',
     '[#6][NX2]=[OX1]',
     '[#1,#6]C([#1,#6])=[NX2][OX2H]',
     '[#1,#6]C([#1,#6])=[NX2]O[#6]',
     '[NX3;$(N([#1,#6;!$([#6]=,#[!#6])])[#1,#6;!$([#6]=,#[!#6])])]C(=[OX1])[NX3;$(N([#1,#6;!$([#6]=,#[!#6])])[#1,#6;!$([#6]=,#[!#6])])]',
     '[NX3;$(N([#1,#6;!$([#6]=,#[!#6])])[#1,#6;!$([#6]=,#[!#6])])]C(=[OX1])O[#6;!$([#6]=,#[!#6])]',
     '[#6;!$([#6]=,#[!#6])]O[C;!$(C=[!#6])]O[#6;!$([#6]=,#[!#6])]',
     '[C;$(C[#1,#6])](=[OX1])O[C;$(C[#1,#6])]=[OX1]',
     '[#1,#6]C(=[OX1])OC(=[OX1])[O,N]',
     '[#1,#6][CH](=[OX1])',
     '[#6;!$([#6]=,#[!#6])][OX2H]',
     'C=,#CC=[OX1]',
     '[#6;!$([#6]=,#[!#6])]OC(=[OX1])O[#6;!$([#6]=,#[!#6])]',
     'C=[OX1]',
     '[OX2H][C;!$(C=[!#6])][OX2H]',
     '[#1,#6]C(=[OX1])[OX2H]',
     '[OX2H][#6;!$([#6]=,#[!#6])]~[#6;!$([#6]=,#[!#6])][OX2H]',
     'C=C[OX2H]',
     '[#1,#6]C(=[OX1])OC=C',
     '[#6;!$([#6]=,#[!#6])]OC=C',
     '[#6;!$([#6]=,#[!#6])]1[#6;!$([#6]=,#[!#6])]O1',
     '[#1,#6]C(=[OX1])O[#6;!$([#6]=,#[!#6])]',
     '[#6;!$([#6]=,#[!#6])]O[#6;!$([#6]=,#[!#6])]',
     '[#6;!$([#6]=,#[!#6])]O[C;!$(C=[!#6])][OX2H]',
     'O[OX2H]',
     'C=C=[OX1]',
     '[#6]C(=[OX1])[#6]',
     '[#1,#6]C(=[OX1])[#1,#6]',
     '[OX2H]-[#6]-1-[#6]~*~[#6;!$([#6]=,#[!#6])]-[#8]-1',
     'O=[#6]-1-[#6]~*~[#6;!$([#6]=,#[!#6])]-[#8]-1',
     '[#6]OO[#6]',
     '[C;$(CO[#6;!$(C=[OX1])])](=[OX1])O[C;$(CO[#6;!$(C=[OX1])])]=[OX1]',
     '[OX1]=C([#1,#6])[BrX1]',
     '[OX1]=C([#1,#6])[ClX1]',
     '[OX1]=C([#1,#6])[FX1]',
     '[OX1]=C([#1,#6])[FX1,ClX1,BrX1,IX1]',
     '[OX1]=C([#1,#6])[IX1]',
     'C=C[BrX1]',
     'C=C[ClX1]',
     'C=C[FX1]',
     'C=C[FX1,ClX1,BrX1,IX1]',
     'C=C[IX1]',
     '[C;!$(C=,#*)][BrX1]',
     '[C;!$(C=,#*)][ClX1]',
     '[C;!$(C=,#*)][FX1]',
     '[C;!$(C=,#*)][FX1,ClX1,BrX1,IX1]',
     '[C;!$(C=,#*)][IX1]',
     'c[BrX1]',
     'c[ClX1]',
     'c[FX1]',
     'c[FX1,ClX1,BrX1,IX1]',
     'c[IX1]',
     '[CX4][$([ClX1,BrX1,IX1]),$(O[SX4](=[OX1])=[OX1]),$(O[SX4+2]([OX1-])[OX1-])]',
     '[#6;!$([#6]#*)][$([ClX1,BrX1,IX1]),$(O[SX4](=[OX1])=[OX1]),$(O[SX4+2]([OX1-])[OX1-])]',
     '[$([#6]O[PX4](=[OX1])(O[#6])O[#6]),$([#6]O[PX4+]([OX1-])(O[#6])O[#6])]',
     '[$([#6][PX4](=[OX1])([#6])O[#6]),$([#6][PX4+]([OX1-])([#6])O[#6])]',
     '[#1,#6][PX3]([#1,#6])[#1,#6]',
     '[$([#6][PX4](=[OX1])([#6])[#6]),$([#6][PX4+]([OX1-])([#6])[#6])]',
     '[$([#6][PX4](=[SX1])([#6])[#6]),$([#6][PX4+]([SX1-])([#6])[#6])]',
     '[$([#6][PX3]([#6])[OX2H]),$([#6][PX4H](=[OX1])[#6]),$([#6][PX4+H]([OX1-])[#6])]',
     '[#6][PX3]([#6])O[#6]',
     '[$([#6][PX3]([#6])[OX2H]),$([#6][PX4H](=[OX1])[#6]),$([#6][PX4+H]([OX1-])[#6])]',
     '[#6]O[PX3](O[#6])O[#6]',
     '[$([#6][PX4](=[OX1])(O[#6])[OX2]),$([#6][PX4+]([OX1-])(O[#6])[OX2])]',
     '[$([#6][PX4](=[OX1])([OX2H])[OX2H]),$([#6][PX4+]([OX1-])([OX2H])[OX2H])]',
     '[$([#6][PX3](O[#6])[OX2]),$([#6][PX4H](=[OX1])O[#6]),$([#6][PX4+H]([OX1-])O[#6])]',
     '[PX4+;!$([PX4+][*-])]',
     '[$([#6][PX3]([OX2H])[OX2]),$([#6][PX4H](=[OX1])[OX2]),$([#6][PX4+H]([OX1-])[OX2])]',
     '[#6][PX4](=C)([#6])[#6]',
     '[#6][SX2][SX2][#6]',
     '[#6][NX2]=C=[SX1]',
     '[$([SX4](=[OX1])(=[OX1])([OX2][#6;!$([#6]=,#[!#6])])[OX2][#6;!$([#6]=,#[!#6])]),$([SX4+2]([OX1-])([OX1-])([OX2][#6;!$([#6]=,#[!#6])])[OX2][#6;!$([#6]=,#[!#6])])]',
     '[#6;!$([#6]=,#[!#6])][SX2][OX2][#6;!$([#6]=,#[!#6])]',
     '[#6;!$([#6]=,#[!#6])][SX2][OX2H]',
     '[#6;!$(C=,#[!#6])][SX2][#6;!$(C=,#[!#6])]',
     '[$([SX3](=[OX1])([#6])[#7X3][!S]),$([SX3+]([OX1-])([#6])[#7X3][!S])]',
     '[#6;!$([#6]=,#[!#6])][SX2][OX2][#6;!$([#6]=,#[!#6])]',
     '[#6;!$([#6]=,#[!#6])][SX2][OX2H]',
     '[$([SX3](=[OX1])([OX2][#6;!$([#6]=,#[!#6])])[OX2][#6;!$([#6]=,#[!#6])]),$([SX3+]([OX1-])([OX2][#6;!$([#6]=,#[!#6])])[OX2][#6;!$([#6]=,#[!#6])])]',
     '[$([SX4](=[OX1])(=[OX1])([#6])[#7X3][!S]),$([SX4+2]([OX1-])([OX1-])([#6])[#7X3][!S])]',
     '[$([SX4](=[OX1])(=[OX1])([#6])[OX2][#6;!$([#6]=,#[!#6])]),$([SX4+2]([OX1-])([OX1-])([#6])[OX2][#6;!$([#6]=,#[!#6])])]',
     '[$([SX4](=[OX1])(=[OX1])([#6])[#6]),$([SX4+2]([OX1-])([OX1-])([#6])[#6])]',
     '[$([SX4](=[OX1])(=[OX1])([#6])[OX2H]),$([SX4+2]([OX1-])([OX1-])([#6])[OX2H])]',
     '[SX3+;!$([SX3+][*-])]',
     '[$([SX3](=[OX1])([#6])[#6]),$([SX3+]([OX1-])([#6])[#6])]',
     'C=[SX1]',
     '[#1,#6]C(=[SX1])[#7]',
     '[#6][SX2]C#[NX1]',
     '[#1,#6]C(=[OX1])[SX2][#6;!$([#6]=,#[!#6])]',
     '[#6;!$(C=,#[!#6])][SX2H]',
     '[#7]C(=[SX1])[#7]',
     '[#6;!$([#6]=,#[!#6])]OC(=[SX1])[SX2][#6;!$([#6]=,#[!#6])]',
      's1cccc1']
    
    name_substructure = ['aniline',
     'arene',
     'azaarene',
     'azaarene oxide',
     'benzene ring',
     'heteroarene',
     'phenol',
     'alkene',
     'alkyne',
     'alkynylide',
     'allene',
     'carbanion',
     'alkyl azide',
     'amidine',
     'aminal',
     'amine',
     'primary amine',
     'secondary amine',
     'tertiary amine',
     'ammonium',
     'azide',
     'aziridine',
     'azo',
     'carbodiimide',
     'cyanamide',
     'diazo',
     'enamine',
     'guanidine',
     'hydrazine',
     'hydrazone',
     'imine',
     'iminyl',
     'isonitrile',
     'ketenimine',
     'nitrile',
     'acyl azide',
     'acyl nitrile',
     'N-acylcarbamate or urea (mixed imide)',
     'alkoxylamine',
     'amine oxide, tertiary',
     'azoxy',
     'carbamate',
     'carboxamide',
     'primary carboxamide',
     'secondary carboxamide',
     'tertiary carboxamide',
     'cyanate',
     'enamide',
     'hemiaminal',
     'hemiaminal ether',
     'hydroxamic acid',
     'hydroxylamine',
     'imidate ester',
     'imide',
     'isocyanate',
     'lactam',
     'nitrate ester',
     'nitrite ester',
     'nitro',
     'nitronate ester',
     'nitrone',
     'nitroso',
     'oxime',
     'oxime ether',
     'urea',
     'urethane',
     'acetal',
     'acyl anhydride',
     'O-acylcarbonate or carbamate (mixed anhydride)',
     'aldehyde',
     'alkanol',
     'Î±,Î²-unsaturated carbonyl',
     'carbonate ester',
     'carbonyl',
     'carbonyl hydrate (1,1-diol)',
     'carboxylic acid',
     '1,2-diol',
     'enol',
     'enol ester',
     'enol ether',
     'epoxide',
     'ester (carboxylate ester)',
     'ether',
     'hemiacetal',
     'hydroperoxide',
     'ketene',
     'ketone',
     'ketone or aldehyde',
     'lactol',
     'lactone',
     'peroxide',
     'pyrocarbonate diester',
     'acyl bromide',
     'acyl chloride',
     'acyl fluoride',
     'acyl halide',
     'acyl iodide',
     'alkenyl bromide',
     'alkenyl chloride',
     'alkenyl fluoride',
     'alkenyl halide',
     'alkenyl iodide',
     'alkyl bromide',
     'alkyl chloride',
     'alkyl fluoride',
     'alkyl halide',
     'alkyl iodide',
     'aryl bromide',
     'aryl chloride',
     'aryl fluoride',
     'aryl halide',
     'aryl iodide',
     'C(sp3)-leaving group',
     'leaving group',
     'phosphate triester',
     'phosphinate ester',
     'phosphine',
     'phosphine oxide',
     'phosphine sulfide',
     'phosphinic acid',
     'phosphinite ester',
     'phosphinous acid',
     'phosphite triester',
     'phosphonate monoester or diester',
     'phosphonic acid or monoester',
     'phosphonite monoester or diester',
     'phosphonium',
     'phosphonous acid or monoester',
     'phosphorane',
     'disulfide',
     'isothiocyanate',
     'sulfate diester',
     'sulfenate ester',
     'sulfenic acid',
     'sulfide',
     'sulfinamide',
     'sulfinate ester',
     'sulfinic acid',
     'sulfite diester',
     'sulfonamide',
     'sulfonate ester',
     'sulfone',
     'sulfonic acid',
     'sulfonium',
     'sulfoxide',
     'thiocarbonyl',
     'thiocarboxamide',
     'thiocyanate',
     'thioester',
     'thiol',
     'thiourea',
     'xanthate ester',
      'thiophene']

    #fetch all substructure definitions and calculate mols for them
    print('Generating molecular objects from pre-defined substructures')
    mol_substructures=[]
    for substructure in smarts_substructures:
        mol_substructures.append(Chem.MolFromSmarts(substructure))

    return mol_substructures,  name_substructure

